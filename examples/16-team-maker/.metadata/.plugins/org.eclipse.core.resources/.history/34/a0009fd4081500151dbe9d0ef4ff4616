import java.util.ArrayList;
import java.util.Random;


public class TeamMaker {
	
    public static void main(String[] arguments)
    {
        Settings settings = new Settings();
        ArrayList<String> playersList = new ArrayList<String>();
        playersList.add("Lazar Sestrimski");
        playersList.add("Ivan Ivanov");
        playersList.add("Georgi Georgiev");
        playersList.add("Peter Petrov");
        playersList.add("Hristo Hristov");
        playersList.add("Dimitar Dimitrov");
        playersList.add("Kiril Kirilov");
        playersList.add("Nikolay Nikolv");
        playersList.add("Boris Borisov");
        playersList.add("Maria Marinova");
        playersList.add("Cvetan Cvetanov");
        
        settings.setPlayersList(playersList);
        settings.setNumberOfTeams(5);
        
        Random rand  = new Random();
        ArrayList<ArrayList<String>> teams = new ArrayList<ArrayList<String>>();
        int originalPlayersCount = settings.getPlayersList().size();
        int residue;

        for (int i = 0; i < settings.getNumberOfTeams() - 1; i++)
        {
            teams.add(new ArrayList<String>());
        }

        int playerPerTeam = CalculatePlayersPerTeam(originalPlayersCount, settings.getNumberOfTeams(), residue);

        while (settings.getPlayersList().size() != residue)
        {
            int playerIdx = rand.Next(settings.PlayersList.Count);
            int teamIdx = rand.Next(teams.Count);

            if (teams[teamIdx].Count == playerPerTeam)
            {
                continue;
            }

            teams[teamIdx].Add(settings.PlayersList[playerIdx]);
            settings.PlayersList.RemoveAt(playerIdx);
        }

        teams.add(settings.getPlayersList());
        printTeams(teams);
    }
	
    private static Information calculatePlayersPerTeam(int originalPlayersCount, int numberOfTeams, int residue)
    {
    	Information info = new Information();
        int playersPerTeam = originalPlayersCount/numberOfTeams;

        while ((originalPlayersCount - ((numberOfTeams - 1) * playersPerTeam) - playersPerTeam) > 1)
        {
            playersPerTeam++;
        }

        residue = originalPlayersCount - (numberOfTeams - 1) * playersPerTeam;

        while (playersPerTeam - residue > 1)
        {
            residue++;
        }
        info.setResidue(residue);
        info.setPlayersPerTeam(playersPerTeam);
        return info;
    }
	
    public static void printTeams(ArrayList<ArrayList<String>> teams)
    {
        for (int i = 0; i < teams.size(); i++)
        {
            System.out.println("Team: "+(i + 1));
            for (int j = 0; j < teams.get(i).size(); j++)
            {
            	System.out.println("\t" + teams.get(i).get(j));
            }
        }
    }
}
